name: Dev CI/CD Pipeline

on:
  push:
    branches: [ "dev" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      # MySQL
      SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/testdb
      SPRING_DATASOURCE_USERNAME: test
      SPRING_DATASOURCE_PASSWORD: test
      # Redis
      SPRING_REDIS_URL: redis://test:test@localhost:6379/0

      # MongoDB
      SPRING_DATA_MONGODB_URI: mongodb://test:test@127.0.0.1:27017/testdb?authSource=admin

      # Vault (dev)

      VAULT_URI: http://127.0.0.1:8200
      VAULT_ROLE_ID: "test-role-id"
      VAULT_SECRET_ID: "test-secret-id"
      
      JWT_SECRET: test-secret

      PADO_RABBITMQ_HOST: 127.0.0.1
      RABBITMQ_USERNAME: test
      RABBITMQ_PASSWORD: testpw
      RABBITMQ_VHOST: "/"   # spring.rabbitmq.virtual-host 설정에 매핑됨

    services:
      mysql:
        image: mysql:8.0
        ports: ["3306:3306"]
        env:
          MYSQL_ROOT_PASSWORD: test
          MYSQL_DATABASE: testdb
          MYSQL_USER: test
          MYSQL_PASSWORD: test
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u$$MYSQL_USER -p$$MYSQL_PASSWORD || exit 1"
          --health-interval=10s --health-timeout=5s --health-retries=10

      redis:
        image: redis:7
        ports: ["6379:6379"]
        # 비번이 필요하면 아래처럼:
        # options: >-
        #   --cmd "redis-server --requirepass redispw"
        options: >-
          --health-cmd="redis-cli ping || exit 1"
          --health-interval=10s --health-timeout=3s --health-retries=10

      mongo:
        image: mongo:7
        ports: ["27017:27017"]
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
          MONGO_INITDB_DATABASE: testdb
        options: >-
          --health-cmd="mongosh --quiet --eval 'db.runCommand({ ping: 1 })' || exit 1"
          --health-interval=10s --health-timeout=5s --health-retries=10

      vault:
        image: hashicorp/vault:1.15
        ports: ["8200:8200"]
        env:
          VAULT_DEV_ROOT_TOKEN_ID: root
          VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
        options: >-
          --cap-add=IPC_LOCK
          --health-cmd="wget -qO- http://127.0.0.1:8200/v1/sys/health || exit 1"
          --health-interval=10s --health-timeout=5s --health-retries=20

      rabbitmq:
        image: rabbitmq:3.13-management
        ports:
          - "5672:5672"   # AMQP
          - "15672:15672" # 관리 콘솔
        env:
          RABBITMQ_DEFAULT_USER: test
          RABBITMQ_DEFAULT_PASS: testpw
          RABBITMQ_DEFAULT_VHOST: "/"
        options: >-
          --health-cmd="rabbitmq-diagnostics -q ping"
          --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
    - name: Checkout Source
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
    
    - name: Wait for services (extra safety)
      run: |
        set -e
        # MySQL
        for i in {1..30}; do
          nc -z 127.0.0.1 3306 && echo "MySQL up" && break || sleep 2
        done
        # Redis
        for i in {1..30}; do
          nc -z 127.0.0.1 6379 && echo "Redis up" && break || sleep 2
        done
        # Mongo
        for i in {1..30}; do
          nc -z 127.0.0.1 27017 && echo "Mongo up" && break || sleep 2
        done
        # Vault
        for i in {1..30}; do
          curl -s $VAULT_URI/v1/sys/health >/dev/null && echo "Vault up" && break || sleep 2
        done
        # RabbitMQ
        for i in {1..30}; do
          nc -z 127.0.0.1 5672 && echo "RabbitMQ up" && break || sleep 2
        done

    - name: Run Tests and Build (in api-server)
      working-directory: api-server
      run: ./gradlew test build -Dspring.profiles.active=ci --info --stacktrace

    - name: Install cloudflared
      run: |
        curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
        chmod +x cloudflared
        sudo mv cloudflared /usr/local/bin/

    - name: Write SSH Key
      run: |
        echo "${{ secrets.PADO_DEV_SSH_KEY }}" > pado_dev_key
        chmod 600 pado_dev_key

    - name: Copy .jar to server
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname pado-dev-ssh.taehyeok.org" \
            -o StrictHostKeyChecking=no \
            -i pado_dev_key root@localhost \
            'mkdir -p /opt/pado && exit'

        rsync -avz \
        -e "ssh -i pado_dev_key \
            -o ProxyCommand='cloudflared access ssh --hostname pado-dev-ssh.taehyeok.org' \
            -o StrictHostKeyChecking=no" \
        api-server/build/libs/pado-server-0.0.1-SNAPSHOT.jar \
        root@localhost:/opt/pado/api-server.jar

    - name: Kill running process (if any)
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname pado-dev-ssh.taehyeok.org" \
            -o StrictHostKeyChecking=no \
            -i pado_dev_key root@localhost \
            'ps aux | grep api-server.jar | grep -v grep | awk "{print \$2}" | xargs -r kill'

    - name: Start server
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname pado-dev-ssh.taehyeok.org" \
            -o StrictHostKeyChecking=no \
            -i pado_dev_key root@localhost \
            "nohup java -jar /opt/pado/api-server.jar --spring.profiles.active=dev > /opt/pado/api-server.log 2>&1 &"
